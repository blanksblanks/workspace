import java.util.Arrays;

public class TreeBuilder {
	MyStack<ExpressionTree> expStack = new MyStack<ExpressionTree>();
	String[] operations = { "+", "-", "*", "/" };

	public TreeBuilder() {
	}

	public ExpressionTree build(String[] s) {
		Object nextElement;
		ExpressionTree operand0;
		ExpressionTree operand1;

		// for all elements in the postfix expression
		for (int i = 0; i < s.length; i++) {
			nextElement = s[i];
			// if the element is in the operations list, pop two trees and make
			// a new tree
			// with the previous two as left and right references
			if (Arrays.asList(operations).contains(nextElement)) {
				operand1 = expStack.peekAndPop();
				operand0 = expStack.peekAndPop();
				expStack.push(new ExpressionTree(nextElement, operand0,
						operand1));
			}

			// else, must be either a variable or a number, so put element in an
			// expression tree
			// and push onto stack
			else
				expStack.push(new ExpressionTree(nextItem, null, null));
		}

		return expStack.peekAndPop();
	}

}