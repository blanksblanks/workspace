/**
 * 
 * MatrixSolver
 * 
 * @author nb2406
 * 
 * Write a program that solves a system of linear equations using elimination
 * and backsubstitution, where the coefficient matrix is m-diagonal and m âˆˆ N is
 * odd; see Ch. 9, p. 468.
 * 
 * You may use the code on p. 100 or the pseudocode in the class notes, however, you
 * should modify it to take advantage of the structure of the system. Do not perform
 * pivoting or row swaps; they are not necessary for certain matrices, such as the
 * one in the example on p. 468.
 * 
 * Your program should take as input the matrix dimension n, the number m, the coefficient
 * matrix, and the right hand side vector b. It should output the solution of the system.
 * Test your program using n = 10 and m = 3, 5.
 *         
 */

import java.io.*;
import java.util.Scanner;

public class MatrixSolver {
	
	public static void main(String[] args) throws IOException {

		if (args.length == 2) {
			
			// Introduction
			System.out
			.println("\nThis program calculates A^(2^n), where A is a n x n square matrix\n");

			// Assign command-line args to file names
			String inFileName = args[0];
			File inFile = new File(inFileName);
			String outFileName = args[1];
			File outFile = new File(outFileName);

			// Checks if file exists before creating Scanner and PrintWriter files
			if (inFile.exists()) {
				Scanner input = new Scanner(inFile);
				PrintWriter output = new PrintWriter(outFile);

				System.out.println("Reading in input values from to \""
						+ inFileName + "\"\n");
				
				// Initializes variables for n, m, coefficient matrix, rhs vector b,
				// (to solve the equation A x = b)
				int n;
				int m;
				double[][] A;
				double[][] b;

				// Parses input file for values
				n = input.nextInt();
				System.out.println("n is " + n);
				A = new double[n][n];
				b = new double[n][1];
				m = input.nextInt();
				System.out.println("m is " + m + "\n");

				// Initializes row and column to start at 0
				int row = 0;
				int column = 0;
				int mcount = 0;
				int vcount = 0;

				// Adds each double value to the correct A[row][column]
				// Column increases up to n - 2
				// If column equals n - 1, the row increases and column resets
				while (input.hasNext() && (mcount < (n*n))) {
					double entry = input.nextDouble();
					A[row][column] = entry;
					if (column < (n - 1)) {
						column++;
					} else if (column == (n - 1)) {
						row++;
						column = 0;
					}
					mcount++;
				}
				
				while (input.hasNext() && (vcount < n)) {
					double entry = input.nextDouble();
					b[vcount][0] = entry;
					vcount++;
				}

				// Closes the input after saving all its content
				input.close();

				// Prints out matrix from the input file
				System.out.println("Matrix A:\n" + toString(A));
				System.out.println("Vector b:\n" + toString(b));
				
				double[][] aug = new double[n][n+1];
				aug = augment(A, b, n);
				System.out.println("Augmented matrix:\n" + toString(aug));
				
				double[][] elim = new double[n][n+1];
				elim = forwardEliminate(aug, m, n);
				System.out.println("Eliminated matrix:\n" + toString(elim));
				
				double[][] x = new double[n][1];
				x = backSubstitute(elim, n);
				System.out.println("x:\n" + toString(x));


				output.println(toString(x));
				System.out.println("Successfully wrote final result to \""
						+ outFileName + "\"");
				output.close();
			} else {
				System.out.println("No such file found, good bye!");
			}
		} else {
			System.out
			.println("\nInput and output files not properly specified. Try again.\n");

		}

	}



	// Prints out the 2D array matrices with blanks between row entries to the console
	public static String toString(double[][] matrix) {
		String s = "";
		for (int i = 0; i < matrix.length; i++) {
			for (int j = 0; j < matrix[i].length; j++) {
//				double trunc = Math.round(matrix[i][j]* 100) / 100;
//				DecimalFormat df = new DecimalFormat("#.##");      
//				double trunc = Double.valueOf(df.format(matrix[i]));
				s +=  String.format("%6.2f", matrix[i][j]); //(trunc + "\t");//
			}
			s += "\n";
		}
		return s;
	}
	
	public static double[][] augment(double[][] matrix, double[][] vector, int n) {
		double[][] augmented = new double[n][n+1];
		for (int i = 0; i < n; i++) {
			  for(int j = 0; j < n; j++) {
			    augmented[i][j] = matrix[i][j];
			  }
		}
		for (int i = 0; i < n; i ++) {
			augmented[i][n] = vector[i][0];
		}
		return augmented;
	}
	
	public static double[][] forwardEliminate(double[][] A, int m, int n) {
		for (int k = 0; k < (n - 1); k++) {
			for (int i = k + 1; (i <= k + m/2) && (i < n); i++) {
				double elem = A[i][k]/A[k][k];
				for (int j = k; (j <= k + m/2) && (j < n); j++) {
					A[i][j] = A[i][j] - (elem*A[k][j]);
				}
				A[i][n] = A[i][n] - elem*(A[k][n]);
			}
		}
		return A;
	}
	
	public static double[][] backSubstitute(double[][] U, int n) {
		double [][] x = new double[n][1];
		x[n-1][0] = U[n-1][n]/U[n-1][n-1];
			for (int i = (n-1); i >=0; i--) {
				for (int j = i+1; j < n; j++) {
					U[i][n] -= U[i][j] * x[j][0];
				}
				x[i][0] = U[i][n]/U[i][i];
			}
		return x;
	}
}
