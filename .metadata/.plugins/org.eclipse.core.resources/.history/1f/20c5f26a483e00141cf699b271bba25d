import java.util.Arrays;
import java.util.Comparator;
import java.util.Random;

/**
 * 
 * Problem 1
 * 
 * @author nb2406
 * 
 *         Weiss, Exercise 1.15: Define a Rectangle class that provides
 *         getLength and getWidth methods. Using the findMax routines in Figure
 *         1.18, write a main that creates an array of Rectangle and finds the
 *         largest Rectangle first on the basis of area, and then on the basis
 *         of perimeter.
 * 
 *         Additional instructions: For this problem you are creating a
 *         Rectangle class as described in the problem. You are then going to
 *         create two implementations of Comparator on that Rectangle class: one
 *         that compares by area, one that compares by perimeter. You will then
 *         create a final class called Problem1 that contains the findMax and
 *         main methods.
 * 
 */

public class Problem1 {

	class TestProgram {
		public static void main(String[] args) {
			Random r = new Random();

			Rectangle[] list = new Rectangle[8];
			for (int i = 0; i < list.length; i++) {
				int width = r.nextInt(9) + 1;
				int height = r.nextInt(9) + 1;
				list[i] = new Rectangle(width, height);
			}

			print(list);

			System.out.println("The largest rectangle by area is "
					+ findMax(list, new CompareByArea()));
		}
	}

	public static void print(Rectangle[] list) {
		for (int i = 0; i < list.length; i++) {
			System.out.println(" [" + i + "] " + list[i] + "    area = "
					+ list[i].getWidth() * list[i].getLength());
		}
	}

	public static <AnyType> AnyType findMax(AnyType[] arr,
			Comparator<? super AnyType> cmp) {
		int maxIndex = 0;

		for (int i = 0; i < arr.length; i++) {
			if (cmp.compare(arr[i], arr[maxIndex]) > 0) {
				maxIndex = 1;
			}
		}
		return arr[maxIndex];
	}

	class CompareByArea implements Comparator<Rectangle> {
		public int compare(Rectangle rect1, Rectangle rect2) {
			int length1 = rect1.getLength();
			int width1 = rect1.getWidth();
			int area1 = length1 * width1;

			int length2 = rect2.getLength();
			int width2 = rect2.getWidth();
			int area2 = length2 * width2;

			return area1 - area2;
		}
	}

	class CompareByPerimeter implements Comparator<Rectangle> {
		public int compare(Rectangle rect1, Rectangle rect2) {
			int length1 = rect1.getLength();
			int width1 = rect1.getWidth();
			int perimeter1 = 2 * length1 + 2 * width1;

			int length2 = rect2.getLength();
			int width2 = rect2.getWidth();
			int perimeter2 = 2 * length2 + 2 * width2;

			return perimeter1 - perimeter2;
		}
	}
}

// int l, w;
// Rectangle r1 = new Rectangle();
// System.out.println(r1); // calls toString of r1
//
// Rectangle r2 = new Rectangle(4,3);
// System.out.println(r2); // calls toString of r2
//
// System.out.println("Test getLength, getWidth ...");
// l = r2.getLength();
// w = r2.getWidth();
// System.out.println("  r2 length: " + l);
// System.out.println("  r2 width: " + w);
//
// System.out.println("Test getArea, getPerim ...");
// System.out.println("  r1 area: " + r1.getArea());
// System.out.println("  r1 Perim: " + r1.getPerim());
// System.out.println("  r2 area: " + r2.getArea());
// System.out.println("  r2 Perim: " + r2.getPerim());

// public static void main(String args[]){
// // Takes a list o Dog objects
// List<Dog> list = new ArrayList<Dog>();
//
// list.add(new Dog("Shaggy",3));
// list.add(new Dog("Lacy",2));
// list.add(new Dog("Roger",10));
// list.add(new Dog("Tommy",4));
// list.add(new Dog("Tammy",1));
// Collections.sort(list);// Sorts the array list
//
// for(Dog a: list)//printing the sorted list of names
// System.out.print(a.getDogName() + ", ");
//
// // Sorts the array list using comparator
// Collections.sort(list, new Dog());
// System.out.println(" ");
// for(Dog a: list)//printing the sorted list of ages
// System.out.print(a.getDogName() +"  : "+
// a.getDogAge() + ", ");
