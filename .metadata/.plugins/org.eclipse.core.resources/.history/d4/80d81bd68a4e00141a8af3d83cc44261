Name: Nina Baculinao
Uni: nb2406

CS3151 Homework 2 Readme

***

MATRIX SOLVER

***

HOW TO RUN

  1. Compile the files using the following commands in Terminal
  
    $ javac MatrixSolver.java
    
  2. Run the file with two command-line args (note: call the .txt files whatever you like)
  
    $ java MatrixSolver input.txt output.txt
    
***

BRIEF DESCRIPTION

This program solves systems of linear equations Ax = b by using Gaussian elimination
and back substitution, where the coefficient matrix is m-diagonal and m is odd. 

***

CLASSES & METHODS
 
    MatrixSolver
    
        augment: takes matrix A and vector b and returns an augmented matrix
        
        forwardEliminate: reduces the system to upper-triangular form.
        - Takes advantage of the m-diagonal form by eliminating only the
        nonzero elements in the matrix (that is, the ones (m-1)/2 rows below
        and columns to the right of the diagonal)
        
        backwardSubstitute: solves the simplified system of equations, in upper
        triangular form, to find the values of x[i] by moving from top to bottom
        
        toString: prints out the 2D array matrices in a readable format to the console,
        with rows separated by new lines and row entries separated by blank tabs
    
        main: reads in user-specified input and writes out output file
        a) scans first two lines of input file in order to assign n and m int values
        b) creates double[n][n] 2D arrays to represent n x n matrix A and n x 1 vector b
        c) scans next n lines for double values and adds each to correct indices for A and b
        d) sets up an augmented matrix with A and b
        e) uses forward elimination to reduce matrix A to upper triangular form
        f) uses back substitution to produce solution set in vector x
        g) writes final solutions of x to output file
        * Note: if you do provide command-line arguments, but the files don't exist, the
          program will self-exit

                 
        
***

TEST CASES

    Case 1:

    * When k is very large, the entries can quickly become large too and the columns become mis-aligned
    because of the huge double number values of the elements in the array - should shorten these but
    keep the scientific notation
    * Used to have more steps in multiplyMatrices but this seems the most efficient, same with the loop
    that runs A^2 ^k times.
    * Readin for the individual entries in the row and column was tricky, but got that to work;
    kept the hard-coded 2D arrays for reference