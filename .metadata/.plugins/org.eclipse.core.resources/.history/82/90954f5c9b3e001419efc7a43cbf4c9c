
// TODO: Implement the code in Java, and give the running time for several values of N.
// TODO: Compare your analysis with the actual running times.

public class Exercise2_7 {
	
	public static void main(String[] args) {
		
		int[] thousands = {1, 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000};
		int[] hundreds = {1, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
		
		for (int loop = 0; loop <= 4; loop++) {
			for (int i = 0; i < thousands.length; i++) {
				runTimeFor(loop, thousands[i]);
			}
		}
			
		for (int loop = 5; loop <= 6; loop++) {
			for (int i = 0; i < thousands.length; i++) {
				runTimeFor(loop, thousands[i]);
			}
		}
	}
	
	public static void runTimeFor(int sumNum, int someNum) {

		TimeInterval time = new TimeInterval();
		time.startTiming();
		double runTime;

		Sum test = new Sum();
		int sum;
		
		switch (sumNum) {
			case 1: 
					sum = test.sumOne(someNum);
					break;
            case 2: 
            		sum = test.sumTwo(someNum);
					break;
            case 3: 
            		sum = test.sumThree(someNum);
					break;
            case 4: 
            		sum = test.sumFour(someNum);
					break;
            case 5: 
            		sum = test.sumFive(someNum);
					break;
            case 6: 
            		sum = test.sumSix(someNum);
            		break;
		}
		runTime = time.getElapsedTime();
		System.out.println("Loop:" + sumNum + " N:" + someNum +
		" Running time: " + runTime + " ms");

	}
	
}
