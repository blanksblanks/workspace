import java.util.LinkedList;

public class MyStack<T> {
	
	private LinkedList<T> myList = new LinkedList<T>();
	// Note: must add parameter 'T' to 'MyStack' or get error
	// Used generic T type instead of Object to avoid casting
	
	public MyStack(){

	}
	
	// pushes object to top of stack
	public void push(T x){
		myList.add(0, x);
	}
	
	public void pop() throws UnderflowException{
		if (isEmpty()) {
            throw new UnderflowException( );
		
		} else {
			myList = myList.next;
		}
	}
	
	public boolean isEmpty(){
		return topOfStack == null;
	}
	
	public String toString()
	{
		return myList.toString();
	}
	
    public static void main( String [ ] args )
    {
        StackLi s = new StackLi( );

        for( int i = 0; i < 10; i++ )
            s.push( new MyInteger( i ) );

        while( !s.isEmpty( ) )
            System.out.println( s.topAndPop( ) );
    }      

}
