import java.util.Arrays;

public class TreeBuilder
	{
		MyStack<ExpressionTree> expStack = new MyStack<ExpressionTree>();
		String[] operations = {"+","-","*","/"};

		public TreeBuilder(){
		}
		
		/*
		 * Creates an ExpressionTree from a postfix expression recursively 
		 * using MyStack class
		 */
		public ExpressionTree build(String[] p)
		{
			Object nextItem;
			ExpressionTree operand0;
			ExpressionTree operand1;
			
//			for all elements in the postfix expression
		    for (int i=0; i < p.length; i++)
		    {
		    	nextItem = p[i]; 
		    	
//		    	if the element is in the operations list, pop two trees and make a new tree 
//		    	with the previous two as left and right references
		    	if ( Arrays.asList(operations).contains(nextItem) )
		    	{
		    		operand1 = expStack.popAndPeek();
		    	    operand0 = expStack.popAndPeek();
		    	    expStack.push(new ExpressionTree(nextItem,operand0,operand1));
		    	}
		    	
//		    	else, must be either a variable or a number, so put element in an expression tree 
//		    	and push onto stack
		    	else
		    	    expStack.push(new ExpressionTree(nextItem,null,null));
		    }	
			
			return expStack.pop();
		}

}