import java.util.Arrays;

public class TreeMaker {

	public TreeMaker() {
	}

	public ExpressionTree makeTree(String[] s) {
		
		Object element;
		ExpressionTree operand;
		ExpressionTree nextOperand;
		
		// Traverse through all elements in the user input array and push them into stack
		// If an element is an operator, pop last two trees and assign them as operands
		// Use new operator and two operands, push new expression (sub)tree onto stack
		// If an element is a number (!operator), push onto stack
		for (int i = 0; i < s.length; i++) {
			element = s[i];
			if (Arrays.binarySearch(operators, element) >= 0) { // if -1, not found
				operand = treeStack.peekAndPop();
				nextOperand = treeStack.peekAndPop();
				treeStack.push(new ExpressionTree(element, operand,
						nextOperand));
			} else {
				treeStack.push(new ExpressionTree(element, null, null));
			}
		}
		
		return treeStack.peekAndPop();
	}
	
	MyStack<ExpressionTree> treeStack = new MyStack<ExpressionTree>();
	String[] operators = { "+", "-", "*", "/" };

}
