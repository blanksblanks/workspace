import java.util.Arrays;

public class TreeMaker {

	public TreeMaker() {
	}

	public ExpressionTree makeTree(String[] s) {
		
		Object nextElement;
		ExpressionTree operand;
		ExpressionTree nextOperand;
		
		for (int i = 0; i < s.length; i++) {
			nextElement = s[i];
			// if element is operator, pop last two trees and assign them as operands
			// With the new operator and two operands, make new tree stack
			if (Arrays.binarySearch(operators, nextElement) < 0) {
				operand = treeStack.peekAndPop();
				nextOperand = treeStack.peekAndPop();
				treeStack.push(new ExpressionTree(nextElement, operand,
						nextOperand));
			} else { // if not an operator, must be a number and pushed onto stack
				treeStack.push(new ExpressionTree(nextElement, null, null));
			}
		}
		return treeStack.peekAndPop();
	}
	
	MyStack<ExpressionTree> treeStack = new MyStack<ExpressionTree>();
	String[] operators = { "+", "-", "*", "/" };

}
